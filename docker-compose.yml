version: '3.8'

# This is a basic placeholder docker-compose.yml for development.
#
# Key considerations for a real setup:
# 1. Dockerfiles: Each service (frontend, backend) will need its own Dockerfile
#    (e.g., Dockerfile.dev or simply Dockerfile) in its respective directory.
#    These files define how the application image is built, dependencies installed,
#    and how the application starts.
# 2. Build vs. Image: The commented-out 'build' sections are what you'd use
#    when you have Dockerfiles. For this placeholder, pre-built images are used.
# 3. Volumes: Volumes are crucial for development as they map your local code
#    into the container, allowing for live reloading.
# 4. Environment Variables: Use .env files for sensitive or environment-specific
#    configurations and reference them here.
# 5. Networking: For services to communicate by name (e.g., frontend calling backend),
#    Docker Compose sets up a default network. More complex network configurations
#    can be defined if needed.
# 6. Database: A database service (e.g., Postgres for Supabase compatibility)
#    could be defined here if you were running it locally. Since this project
#    targets Supabase, the database is external.
# 7. Production: For production, you'd typically have a separate docker-compose.prod.yml
#    or use different settings within the Dockerfiles (multi-stage builds).

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: contact_form_frontend_dev
    command: npm run dev
    ports:
      - "3000:3000"
    volumes:
      # Mount the local frontend directory into the container for live reloading.
      - ./frontend:/app
      # Use a named volume for node_modules to persist them and avoid being overwritten by the host mount.
      - frontend_node_modules:/app/node_modules
    working_dir: /app
    environment:
      - NODE_ENV=development
      # Add other frontend specific environment variables here
      # e.g., REACT_APP_API_URL=http://localhost:8000/api
    restart: unless-stopped

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: contact_form_backend_dev
    # Command is now taken from Dockerfile's CMD
    ports:
      - "8000:8000"
    volumes:
      # Mount the local backend directory into /code/app in the container
      - ./backend:/code/app
    working_dir: /code # Working directory from where CMD will be executed
    environment:
      - PYTHONUNBUFFERED=1 # Ensures print statements and logs are sent straight to terminal
      - APP_ENV=development
      # Add other backend specific environment variables here
      # e.g., DATABASE_URL, API_KEYS (preferably via .env file and docker-compose env_file property)
    restart: unless-stopped

# Declare the named volume
volumes:
  frontend_node_modules:
