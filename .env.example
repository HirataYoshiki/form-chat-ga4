# .env.example - Environment variables for the Contact Form Widget application
# This file serves as a template for the .env file which docker-compose can use.
# Rename this to .env and fill in your actual values for local development.

# --- Docker Development Environment Settings ---
# These are typically used by docker-compose.yml for local development.
NODE_ENV=development
APP_ENV=development

# Frontend specific environment variables
# URL for the backend API, used by the frontend.
REACT_APP_API_URL=http://localhost:8000/api

# Backend specific environment variables
# Example Database URL for local development (if not using Supabase directly for dev)
# The project primarily uses Supabase (see below), but this is for local alternatives.
DATABASE_URL="postgresql://user:pass@db:5432/mydatabase" # Assumes a 'db' service in docker-compose

# --- AI Agent Settings ---

# Specifies the Gemini model to be used by the AI agent.
# From .sample.env: GEMINI_MODEL_NAME="gemini-2.0-flash"
# From .env.example: GEMINI_MODEL_NAME="gemini-1.5-flash-latest"
# Choosing the one from .env.example as it might be more current with the broader config.
GEMINI_MODEL_NAME="gemini-1.5-flash-latest"

# Google API Key for accessing Google Cloud services, including the Gemini API.
# This is optional if Application Default Credentials (ADC) are already set up.
# Ensure this key has permissions for the Gemini API or Vertex AI API.
# GOOGLE_API_KEY="YOUR_GOOGLE_API_KEY_HERE"

# Alternatively, for Application Default Credentials (ADC),
# you might set GOOGLE_APPLICATION_CREDENTIALS in your environment
# to point to your service account JSON key file.
# GOOGLE_APPLICATION_CREDENTIALS="/path/to/your/service-account-file.json"


# --- Supabase Connection Settings (Primary Database & Auth for this project) ---
# Ensure these are set if using Supabase for development/production.
# SUPABASE_URL="YOUR_SUPABASE_URL"
# SUPABASE_SERVICE_ROLE_KEY="YOUR_SUPABASE_SERVICE_ROLE_KEY" # For backend admin actions

# --- Supabase Auth Settings (for frontend and backend token verification) ---
# JWKS URI for verifying Supabase JWTs. Usually: YOUR_SUPABASE_URL/auth/v1/jwks
# SUPABASE_JWKS_URI="YOUR_SUPABASE_PROJECT_URL/.well-known/jwks.json" # Or YOUR_SUPABASE_URL/auth/v1/jwks

# Supabase JWT Audience (usually 'authenticated')
SUPABASE_JWT_AUDIENCE="authenticated"
# Supabase JWT Issuer (e.g., https://your-project-ref.supabase.co/auth/v1)
# This can often be derived from SUPABASE_URL, but explicit is fine too.
# If your SUPABASE_URL is https://<project-ref>.supabase.co, then issuer is SUPABASE_URL + /auth/v1
# SUPABASE_JWT_ISSUER="YOUR_SUPABASE_PROJECT_URL/auth/v1"

# --- AI Agent Retry Settings ---
AI_AGENT_RETRY_ATTEMPTS=3
AI_AGENT_RETRY_WAIT_INITIAL_SECONDS=1
AI_AGENT_RETRY_WAIT_MAX_SECONDS=10
AI_AGENT_RETRY_WAIT_MULTIPLIER=2

# --- Vertex AI RAG Settings ---
# Google Cloud Project ID
PROJECT_ID=
# Vertex AI Region (e.g., us-central1)
VERTEX_AI_REGION="us-central1"
# Google Cloud Storage bucket for RAG file uploads
RAG_GCS_BUCKET_UPLOADS=
# Google Cloud Storage bucket for RAG processed/indexed files
RAG_GCS_BUCKET_PROCESSED=
# Default chunk size for RAG processing
DEFAULT_RAG_CHUNK_SIZE=1000
# Default chunk overlap for RAG processing
DEFAULT_RAG_CHUNK_OVERLAP=200

# --- Other Potential Settings ---
# LOG_LEVEL="INFO"
